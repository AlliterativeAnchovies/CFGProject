###Wrappers
{
	<wordlist1 is of to the does do what who whose how when where why>
	<wordlist2 that so either neither or nor are at have has than am>
	<wordlist3 be ought with which>
	<questionWords where when why how>
	<qwt who what>

	#There is a bug in the instructor's code which causes a small, hard to
	#notice problem if we use a terminal and a nonterminal in a production rule
	#Example: A -> is B; A,B nonterminals and 'is' is a terminal
	#To avoid this, all terminals used directly should be 'wrapped' in a nonterminal.
	#The reason there are two "wordlist"s is purely so that the angle bracket
	#declarations fit on one line, it is no different than having everything in
	#one list and only saying "1   wrap_wordlistN wordlistN" once.

	#All of the words here must exist in Vocab.gr
	#We are NOT allowed to add words that aren't already in there.

	1   wrap_{wordlist1}        {wordlist1}
	1   wrap_{wordlist2}        {wordlist2}
	1   wrap_{wordlist3}        {wordlist3}
	1   QuestionWord            {questionWords}
	1   QuestionWord_Transitive {qwt}
}
1   wrap_to_be                  wrap_to wrap_be
1   ought_modal                 wrap_ought wrap_to

### Clauses ###=========================================================================================
{
	<person _1st _2nd _3rd>
	<plurality _Sng _Plr>
	<transitivity _Transitive _Intransitive>
	<ispunctuation ε _Punc>

	##########################################################################
	#																		 #	
	#   Global Nonterminals: QuestionClause, StatementClause, SimpleClause   #
	#																		 #
	##########################################################################
	#StatementClause takes no arguments										 #
	#QuestionClause takes no arguments										 #
	#SimpleClause takes either no arguments or (person,plurality)			 #
	#	if no arguments, it will pick an arbitrary (person,plurality) pair.  #
	##########################################################################

	1   S1               StatementClause EOS_Statement
	1   S1               QuestionClause  EOS_Question

	############Statements############

	#Here we handle the most naive statement clause:
	1   StatementClause                    SimpleClause{person}{plurality}
	1   SimpleClause{person}{plurality}    NounPhrase{person}{plurality}_Subj VerbPhrase{person}{plurality}
	1   SimpleClause                       SimpleClause{person}{plurality}

	#There are 3 related types of more complicated statements - Compound, Complex, and Compound-Complex.
	#In theory we could keep compounding sentences but then it becomes a run-on and I deem that ungrammatical.
	#So let's try not to have direct Clause-recursion.

	#A compound statement contains 2 independent (read: simple) clauses.
	#A complex statement is similar but uses SubordConj instead.
	#For compound-complex statements, the most prevalent case in english is just a complex statement joined to a compound one.
	1   StatementClause                    CompoundStatement
	1   StatementClause                    ComplexStatement

		#Compound Statements can be joined with a coordinating conjunction or , ; : --
		#They can also be joined with , + coordinating conjunction
	1   CompoundStatement                  SimpleClause       CoordConj{ispunctuation} SimpleClause
	1   CompoundStatement                  SimpleClause Comma CoordConj                SimpleClause

		#If complex it works the same way except we use subordinating conjunctions
	50  ComplexStatement                   SimpleClause SubordConj SimpleClause

		#CompoundComplex merges the two, complex head compounded with a simple clause or vice versa or everything can be complicated too...
		#"[Bob hates Sally and Sally hates Bob] because they suck"
		#"Bob hates Sally because [Sally hates Bob and Bob hates haters]"
		#Bracketed bit was compound sentence
	5   ComplexStatement                   CompoundStatement SubordConj SimpleClause
	5   ComplexStatement                   SimpleClause      SubordConj CompoundStatement
	1   ComplexStatement                   CompoundStatement SubordConj CompoundStatement


	############Questions#############
	
	#There are 2 main ways to ask questions in english:
	#"Do-Construction": We run. -> Do we run?
	#"Inversion": We are running. -> Are we running?
	#Both of these can have question words prepended:
	#How do we run?
	#Why are we running?
	#Generic question words are {where when why how}, grouped in the nonterminal QuestionWord
	#There is also {who what} in QuestionWord_Transitive, but they must take a transitive verb phrase!
	#Currently I do not try to handle QuestionWord_Transitive

	#Add question words:
	1   QuestionClause                     QuestionWord
	1   QuestionClause                     QuestionWord_Transitive
	1   QuestionClause                     QuestionWord            QuestionClauseHead{transitivity}
	1   QuestionClause                     QuestionWord_Transitive QuestionClauseHead_Transitive
	1   QuestionClause                                             QuestionClauseHead{transitivity}

	#Do-Construction:
	#[do/does] NounPhrase VerbPhrase_inf
	2   QuestionClauseHead{transitivity}   wrap_do   NounPhrase_1st{plurality}_Subj VerbPhrase_inf{transitivity}
	2   QuestionClauseHead{transitivity}   wrap_do   NounPhrase_2nd{plurality}_Subj VerbPhrase_inf{transitivity}
	1   QuestionClauseHead{transitivity}   wrap_do   NounPhrase_3rd_Plr_Subj        VerbPhrase_inf{transitivity} 
	1   QuestionClauseHead{transitivity}   wrap_does NounPhrase_3rd_Sng_Subj        VerbPhrase_inf{transitivity}

	#Inversion question:
	#[is/are/am] NounPhrase GerundPhrase
	1   QuestionClauseHead{transitivity}   wrap_am   NounPhrase_1st_Sng_Subj        ContinuousVerbPhrase{transitivity}
	1   QuestionClauseHead{transitivity}   wrap_are  NounPhrase_2nd_Sng_Subj        ContinuousVerbPhrase{transitivity}
	1   QuestionClauseHead{transitivity}   wrap_are  NounPhrase{person}_Plr_Subj    ContinuousVerbPhrase{transitivity}
	1   QuestionClauseHead{transitivity}   wrap_is   NounPhrase_3rd_Sng_Subj        ContinuousVerbPhrase{transitivity}

}
### Clauses continued: Either/Neither ###=====================================================================================
{
	<person_phrase1 _1st _2nd _3rd>
	<person_phrase2 _1st _2nd _3rd>
	<plurality1 _Sng _Plr>
	<plurality2 _Sng _Plr>
	<ne/e n ε>
	|IGNORE person_phrase1:_1st person_phrase2:_1st|

	####################################################################
	#																   #
	#   Global Nonterminals: NONE!  This is a self contained section   #
	#																   #
	####################################################################

	#Here is a naive, improvable interpretation of either/neither stuffs:
	#"either [NP] or [NP] [VP_plural]" OR "either [NP] [VP] or [NP] [VP]"
	#Concerning the first type:
	#	The verb phrase must be conjugated according to last noun phrase, but pluralized 
	#	(which I think will always be the same regardless of the last noun phrase, for our purposes)
	#	Possible outcomes:
	#		You and I, He and I, You and He,
	#		I and You, I and He, He and You,
	#		We and I, You and We, He and We.
	#   	I and We, We and You, We and He.
	#		You and You, He and He, I and I, We and We
	#	When I look at this list, some of the combinations feel wrong, and I think I can put my finger on it.
	#	There are two problems:
	#	First, "I" should never start a phrase - if it does it should become 'me'
	#		- other things may go to direct object form if desired but its not necessary
	#   Second, the second noun phrase should be a direct object and not a subject
	#		- unless it is 'I' in which case it's okay to leave it.
	#	Fun fact: it's weird how the rule is different for I than it is for everything else!
	#	New Possible outcomes:
	#		You and Me, He and Me, You and Him,
	#		Me and You, Me and Him, He and You,
	#		We and Me, You and Us, He and Us.
	#   	Me and Us, We and You, We and Him.
	#		You and You, He and Him, Me and I, We and Us
	#	Some of these still feel weird sense - but we can fix that later.
	#	If it weren't for "I" going against the pattern, we could implement this with contextExpander already.
	#   What we need is some kind of conditional.  For example, to fix the first problem:
	#   eitherStatement1 -> NounPhrase{person_phrase1}{plurality}{_DirObj IF (person_phrase1,plurality)==(_1st,_Plr) ELSE _Subj}
	#	I went ahead and added this to contextExpander.py - conditionals are evaluated after the template has been fulfilled but
	#	before IGNORE.  The simplest production rule utilizing a conditional would look like:
	#	A{a}{b} -> B$a,b=_c,_d?_e:_f$
	#	Which makes the template A{a}{b} -> B_e if the 'a' template componant is _c and the 'b' is _d, otherwise A{a}{b} -> B_f

	1   StatementClause                                     {ne/e}eitherStatement
	1   {ne/e}eitherStatement                               wrap_{ne/e}either {ne/e}eitherStatement1

	#1st type:

		#The conditional on this line ensures that if I begins a phrase, it becomes Me instead.
	5   {ne/e}eitherStatement1                              NounPhrase{person_phrase1}{plurality1}$person_phrase1,plurality1=_1st,_Sng?_DirObj:_Subj$ {ne/e}eitherStatement2{person_phrase1}{plurality1}
	1   {ne/e}eitherStatement2{person_phrase1}{plurality1}  wrap_{ne/e}or eitherStatement3

		#The next to lines make the 2nd noun always a direct object, unless it is I in which case it is also allowed to stay as just 'I' (a subject)
	1   eitherStatement3                                    NounPhrase{person_phrase2}{plurality2}_DirObj VerbPhrase{person_phrase2}_Plr
	1   eitherStatement3                                    NounPhrase_1st_Sng_Subj VerbPhrase_1st_Plr

	#2nd type:
	1   {ne/e}eitherStatement1                              SimpleClause {ne/e}either2ndType
	1   {ne/e}either2ndType                                 wrap_{ne/e}or SimpleClause

}
### Noun Phrases ###=====================================================================================
{
	<person _1st _2nd _3rd>
	<plurality _Sng _Plr>
	<role _Subj _DirObj _IndObj>
	<transitivity _Transitive _Intransitive>

	#######################################################################
	#																	  #
	#   Global Nonterminals: NounPhrase, SimpleNounPhrase, GerundPhrase   #
	#																	  #
	###########################################################################
	#NounPhrase takes either no arguments, (role), or (person,plurality,role) #
	#	if no arguments, it picks a random (person,plurality,role)            #
	#	if (role), it picks a random (person,plurality).					  #
	#   if (person,plurality,role), this is the default.                      #
	#SimpleNounPhrase behaves like NounPhrase							      #
	#GerundPhrase takes no arguments			 							  #
	###########################################################################

	#Note: only 3rd person can use determiners.  In fact only 3rd person can do most of this stuff, since
	#the other persons only show up as pronouns.  So you will probably see a lot of explicit '_3rd's here.

	#Note 2: 'us' is not in our vocabulary.  Literally every other pronoun is, but 'us' is not...
	#TODO: Remove all things that involve 'us'

	#Casting
	1   NounPhrase                                     NounPhrase{role}
	1   NounPhrase{person}{plurality}                  NounPhrase{person}{plurality}{role}
	1   NounPhrase{role}                               NounPhrase{person}{plurality}{role}
	1   SimpleNounPhrase{role}                         SimpleNounPhrase{person}{plurality}{role}
	1   SimpleNounPhrase                               SimpleNounPhrase{role}

	#Entering Noun Phrase
	1   NounPhrase_3rd{plurality}{role}                Determiner_3rd{plurality} NounPhraseSmart_3rd{plurality}{role}
	1   NounPhrase{person}{plurality}{role}            SimpleNounPhrase{person}{plurality}{role}

	#Naive Noun Phrase - either [Determiner Noun] or [Pronoun] or [Proper Noun]
	1   SimpleNounPhrase_3rd{plurality}{role}          Determiner_3rd{plurality} Noun_3rd{plurality}
	1   SimpleNounPhrase_3rd{plurality}{role}          Determiner_3rd{plurality} Noun_3rd{plurality} ObjectClause_3rd{plurality}
	1   SimpleNounPhrase{person}{plurality}{role}      Pronoun{person}{plurality}{role}
	1   SimpleNounPhrase{person}{plurality}{role}      Pronoun{person}{plurality}{role} ObjectClause{person}{plurality}
	1   SimpleNounPhrase_3rd_Sng{role}                 ProperStuffs_Sng
	1   SimpleNounPhrase_3rd_Plr{role}                 ProperStuffs_Plr

	#Proper Noun Stuffs
	1   ProperStuffs_Sng                               ProperAll_notthing
	1   ProperStuffs_Sng                               wrap_the ProperThing
	1   ProperStuffs_Plr                               Noun_3rd_Plr

	###Object Clauses
	#It is Sir Lancelot [who knows Zoot],[that knows Zoot],[which knows Zoot]

	1   ObjectClause{person}{plurality}                wrap_who   VerbPhrase{person}{plurality}
	1   ObjectClause{person}{plurality}                wrap_that  VerbPhrase{person}{plurality}
	1   ObjectClause{person}{plurality}                wrap_which VerbPhrase{person}{plurality}

	#Gerund Noun Phrase: "[[[Quickly running]]] through the store is illegal."  {Verbs ending in -ing can act as nouns, they are called gerunds}
	#A gerund can't really be an indirect object:  "He throws the ball to running" makes no sense.
	#Neither can it be a direct object: "He throws running" is nonesense.  However, verbs of emotion work with direct object gerunds:
	#"He likes running", "He hates running", etc.  This is worth looking into, however I bet that every time -ing can be used
	#in this context, we could use the infinitive instead - "He likes to run", "He hates to run".  So it would probably be best to handle
	#that by having infinitives have a chance to evaluate to a gerund instead.
	1   NounPhrase_3rd_Sng_Subj                        Adv_cmadj GerundPhrase
	1   NounPhrase_3rd_Sng_Subj                        GerundPhrase
	1   GerundPhrase                                   GerundPhrase{transitivity}
	1   GerundPhrase{transitivity}                     Gerund{transitivity}
	1   GerundPhrase{transitivity}                     Gerund_to{transitivity} wrap_to SimpleNounPhrase{person}{plurality}_IndObj
	1   GerundPhrase{transitivity}                     Gerund_of{transitivity} wrap_of SimpleNounPhrase{person}{plurality}_IndObj
	1   GerundPhrase_Transitive                        Gerund_Transitive SimpleNounPhrase{person}{plurality}_DirObj

	#Less Naive Noun Phrase
	#Nouns can be modified with adjectives in this less naive version
	1   NounPhraseSmart{person}{plurality}{role}       NounModifier Noun{person}{plurality}
	1   NounPhraseSmart{person}{plurality}{role}       Noun{person}{plurality}
	1   NounPhraseSmart{person}{plurality}{role}       NounModifier Noun+Prep{person}{plurality}
	1   NounPhraseSmart{person}{plurality}{role}       Noun+Prep{person}{plurality}

	#"The carrot of doom" - Noun+Prep is what is responsible for the "of doom" part.
	1   Noun+Prep{person}{plurality}                   Noun{person}{plurality} wrap_of SimpleNounPhrase{person}{plurality}_IndObj


	#Noun modifiers go in front of a noun (but before the determiner)
	#"big" [ADJ], "big yellow" [ADJ ADJ], "unfortunately small" [ADV ADJ] are the 3 types of modifiers.
	#This section could be split off into its own "AdjectivePhrase" bit but I think that is overkill, this should suffice.
	#Adv_cmadj is the subset of adverbs that can modify adjectives (since not all adverbs can)
	1   NounModifier                       Adj
	1   NounModifier                       Adj Adj
	1   NounModifier                       Adv_cmadj Adj

}
### Verb Phrases ###=====================================================================================
{
	<person _1st _2nd _3rd>
	<plurality _Sng _Plr>
	<transitivity _Transitive _Intransitive>
	#coin flips and die is just to allow me to use a conditional to compress two lines at once, potentially with a weighted probability

	##############################################################################
	#									                                         #
	#   Global Nonterminals: VerbPhrase, ContinousVerbPhrase, SimpleVerbPhrase   #
	#									                                         #
	##############################################################################
	#VerbPhrase takes either no arguments:   					  #
	#	it picks a random (person,plurality,transitivity)         #
	# or (person,plurality)                                       #
	#	it picks a random (transitivity)                          #
	# or (person,plurality,transitivity)                          #
	#	this is the one with all attributes defined               #
	# or ("inf")                                                  #
	#	ex: VerbPhrase_inf                                        #
	#   this is when you want a phrase in the infinitive          #
	#   it picks a random (transitivity)                          #
	# or ("inf",transitivity)                                     #
	#   ex: VerbPhrase_inf_Transitive                             #
	#   this is when you want a phrase in the infinitive, but     #
	#	with a specific transitivity.                             #
	# or (person,plurality,transitivity)                          #
	#   this is the default.                                      #
	#ContinuousVerbPhrase takes either no arguments:              #
	#   it picks a random (transitivity)                          #
	# or (transitivity)                                           #
	#   this is the default.                                      #
	#SimpleVerbPhrase takes (person,plurality,transitivity)       #
	###############################################################

	1   VerbPhrase                                                   VerbPhrase{person}{plurality}
	1   VerbPhrase{person}{plurality}                                VerbPhrase{person}{plurality}{transitivity}


	########Types of Verb Phrases:

	###Naive - just a single verb - adverbs allowed, past participles allowed, and can be followed with 'with' ("ride with the horse")

	1   VerbPhrase{person}{plurality}{transitivity}         VerbModifier SimpleVerbPhrase{person}{plurality}{transitivity}
	1   VerbPhrase{person}{plurality}{transitivity}         SimpleVerbPhrase{person}{plurality}{transitivity}
	1   VerbPhrase{person}{plurality}{transitivity}         NaiveVerbPhrase{person}{plurality}{transitivity}

	# Verb + (optional DirecObj only if transitive) + (optional IndirecObj) 
	1   SimpleVerbPhrase{person}{plurality}{transitivity}   Verb{person}{plurality}{transitivity} $transitivity=_Transitive?DirectObject:$
	1   SimpleVerbPhrase{person}{plurality}{transitivity}   Verb{person}{plurality}{transitivity} $transitivity=_Transitive?DirectObject:$ IndirectObject
	1   SimpleVerbPhrase{person}{plurality}{transitivity}   Verb{person}{plurality}{transitivity}
	1   SimpleVerbPhrase{person}{plurality}{transitivity}   Verb{person}{plurality}{transitivity} IndirectObject
	# Same as above, but in this case the verb might be followed by 'with': I ride the horse to town with you.
	1   SimpleVerbPhrase{person}{plurality}{transitivity}   WithTakers{person}{plurality}{transitivity} $transitivity=_Transitive?DirectObject:$ WithEnding
	1   SimpleVerbPhrase{person}{plurality}{transitivity}   WithTakers{person}{plurality}{transitivity} $transitivity=_Transitive?DirectObject:$ IndirectObject WithEnding
	1   SimpleVerbPhrase{person}{plurality}{transitivity}   WithTakers{person}{plurality}{transitivity} WithEnding
	1   SimpleVerbPhrase{person}{plurality}{transitivity}   WithTakers{person}{plurality}{transitivity} IndirectObject WithEnding
	# Extremely Simple Version, just a verb and its modifier
	1   NaiveVerbPhrase{person}{plurality}{transitivity}    VerbModifier Verb{person}{plurality}{transitivity}
	1   NaiveVerbPhrase{person}{plurality}{transitivity}    Verb{person}{plurality}{transitivity}
	
	###Modal - will work, can run, might eat, etc... (will, can, might, should,... are modals)

	1   FullModal                                           ought_modal
	9   FullModal                                           Modal

	1   VerbPhrase{person}{plurality}{transitivity}         ModalVerbPhrase{person}{plurality}{transitivity}
	1   ModalVerbPhrase{person}{plurality}{transitivity}    FullModal VerbPhrase_inf{transitivity}
	1   ModalVerbPhrase{person}{plurality}{transitivity}    FullModal wrap_be ContinuousVerbPhrase{transitivity}

	###Infinite - the verb is in the infinitive (or subjunctive).
	
	1   VerbPhrase_inf                                      VerbPhrase_inf{transitivity}
	10  VerbPhrase_inf{transitivity}                        VerbModifier Verb_inf{transitivity}
	10  VerbPhrase_inf{transitivity}                        Verb_inf{transitivity}
	#vvvvv Subjunctive_1st_Sng is only 'suggest', so this line is saying that an allowable infinitive is 'I ought to suggest that [subjunctive clause]'
	1   VerbPhrase_inf{transitivity}                        Subjunctive_1st_Sng wrap_that NounPhrase_Subj VerbPhrase_inf_Transitive
	1   VerbPhrase_inf{transitivity}                        Subjunctive_1st_Sng           NounPhrase_Subj VerbPhrase_inf_Transitive

	###Subjunctifier - the verb can take a subjunctive clause.
	#  The only verb like this we have is suggest, which is intransitive 
	1   VerbPhrase{person}{plurality}{transitivity}         SubjunctiveVerbPhrase{person}{plurality}
	1   VerbPhrase_inf{transitivity}                        Subjunctive_1st_Sng              wrap_that NounPhrase_Subj VerbPhrase_inf_Transitive
	1   VerbPhrase_inf{transitivity}                        Subjunctive_1st_Sng                        NounPhrase_Subj VerbPhrase_inf_Transitive
	1   SubjunctiveVerbPhrase{person}{plurality}            Subjunctive{person}{plurality}   wrap_that NounPhrase_Subj VerbPhrase_inf_Transitive
	1   SubjunctiveVerbPhrase{person}{plurality}            PPSubjunctive{person}{plurality} wrap_that NounPhrase_Subj VerbPhrase_inf_Transitive
	1   SubjunctiveVerbPhrase{person}{plurality}            Subjunctive{person}{plurality}             NounPhrase_Subj VerbPhrase_inf_Transitive
	1   SubjunctiveVerbPhrase{person}{plurality}            PPSubjunctive{person}{plurality}           NounPhrase_Subj VerbPhrase_inf_Transitive

	###Present Participle - the verb is conjugated like a present participle
	#  We will only handle simple cases with this, analagously to the Naive case
	#  But we also incorporate the subjunctifier case
	#  And like the Naive case, we include 'with' clauses
	1   ContinuousVerbPhrase                                ContinuousVerbPhrase{transitivity}
	1   ContinuousVerbPhrase{transitivity}                  Gerund{transitivity}
	1   ContinuousVerbPhrase{transitivity}                  VerbModifier                 Gerund{transitivity}
	1   ContinuousVerbPhrase{transitivity}                  PresentParticipleSubjunctive wrap_that             NounPhrase_Subj VerbPhrase_inf_Transitive
	1   ContinuousVerbPhrase{transitivity}                  PresentParticipleSubjunctive                       NounPhrase_Subj VerbPhrase_inf_Transitive

	###Objects
	1   DirectObject                                        NounPhrase_DirObj
	1   IndirectObject                                      Prep NounPhrase_IndObj

	###With-Takers - Certain verbs can be followed by 'with' "Speak with" "Ride with" "Drink with" etc
	1   WithEnding                                          wrap_with NounPhrase_IndObj



	########Types of Verb Phrases ^^^

	########Am/Is/Are:
	
	#Am, is and are require special treatment because instead of taking objects they can take adjectives,
	#and also can be used in the comparative/superlative.  Also you can say someone is 'at' a place - aka
	#you can use a preposition of location with am/is/are.
	#(Many verbs can take preps of loc, but it's highly irregular when they can or can't.  If you so desire,
	#you can go through the whole vocab list to see which verbs allow them, and incorporate them here.
	#An example is run: He runs at the person, he runs over the field, he runs near the lake, etc...
	#PrepOfLocation is defined near the bottom of this file.)

	#Because is/are/am are irregular, we can't template this bit out easily, so instead we have to write it all out
	1   VerbPhrase_1st_Sng{transitivity}              VerbModifier am+
	1   VerbPhrase_1st_Sng{transitivity}              am+
	1   VerbPhrase_1st_Plr{transitivity}              VerbModifier are+
	1   VerbPhrase_1st_Plr{transitivity}              are+
	1   VerbPhrase_2nd_Sng{transitivity}              VerbModifier are+
	1   VerbPhrase_2nd_Sng{transitivity}              are+
	1   VerbPhrase_2nd_Plr{transitivity}              VerbModifier are+
	1   VerbPhrase_2nd_Plr{transitivity}              are+
	1   VerbPhrase_3rd_Sng{transitivity}              VerbModifier is+
	1   VerbPhrase_3rd_Sng{transitivity}              is+
	1   VerbPhrase_3rd_Plr{transitivity}              VerbModifier are+
	1   VerbPhrase_3rd_Plr{transitivity}              are+
	1   am+                                           wrap_am isAdj+
	1   is+                                           wrap_is isAdj+
	1   are+                                          wrap_are isAdj+

	#The possiblities are: Bob [is smelly], Bob [is stinkier than Jill], Bob [is the stinkiest], Bob [is at the goal]
	1   isAdj+                                        Adj
	1   isAdj+                                        Adj_comp than+
	1   isAdj+                                        wrap_the Adj_sup
	1   isAdj+                                        PrepOfLocation NounPhrase_IndObj
	1   than+                                         wrap_than NounPhrase_DirObj
	1   VerbModifier                                  Adv_cmverbs

	#########Is/Are ^^^^

}


#########################################################################################
### Everything below here is just a preliminary transformation directly from Vocab.gr ###
###          AKA: Nothing complicated should happen, and we just group stuff.         ###
#########################################################################################

#Gerunds
#_to means it can take to as a following preposition
#_of means it can take of as a following preposition
#_obj means it can take a direct object
#This was slightly too complicated to leave in Vocab.gr
1    Gerund_to_Intransitive    speaking
1    Gerund_of_Intransitive    speaking
1    Gerund_to_Transitive      riding
1    Gerund_to_Intransitive    migrating
1    Gerund_of_Transitive      knowing
{
	<transitivity _Transitive _Intransitive>
	1   Gerund    Gerund{transitivity}
}

#Group verbs
{
	<person _1st _2nd _3rd>
	<plurality _Sng _Plr>
	#Some things you thing should be templated out here won't be, because of how they are defined in Vocab.gr
	1   Verb_3rd_Sng_Transitive                      VerbT_3ps
	1   Verb_3rd_Sng_Intransitive                    Verb_intr_3ps
	1   Verb{person}{plurality}                      Verb{person}{plurality}_Transitive
	1   Verb{person}{plurality}                      Verb{person}{plurality}_Intransitive
	1   Verb_inf                                     Verb_inf_Transitive
	1   Verb_inf                                     Verb_inf_Intransitive
}
#All verbs that aren't 3rd_Sng are conjugated like the 3rd_Plr (some irregular exceptions but I don't think they can crop up)
{
	<person _1st _2nd>
	<plurality _Sng _Plr>
	<transitivity _Transitive _Intransitive>
	1   Verb{person}{plurality}{transitivity}           Verb_3rd_Plr{transitivity}
}

#Dealing with person and plurality
#Not templated - this is grabbing stuff from Vocab.gr
1   Determiner_3rd_Sng      Det_s
1   Determiner_3rd_Sng      Det_a
1   Determiner_3rd_Plr      Det_a
1   Determiner_3rd_Plr      Detpl
1   Noun_3rd_Sng            Noun
1   Noun_3rd_Plr            Noun_p

#cmadj = can modify adjectives
#such as "the unfortunately green eyes"
#loc = adverb of location
#1/3/3/1 weightings because 8 in total, proportionally represented
1   Adverb Adv_time
3   Adverb Adv
3   Adverb Adv_cmadj
1   Adverb Adv_loc

#Adverbs that can modify verbs
4   Adv_cmverbs Adv
3   Adv_cmverbs Adv_cmadj

#Proper
1   ProperAll          Proper
1   ProperAll          ProperPlace
1   ProperAll          ProperThing
1   ProperAll_notthing Proper
1   ProperAll_notthing ProperPlace

#Verbs that take to as a preposition
1   ToTakers_inf     ride
1   ToTakers_inf     speak
1   ToTakers_inf     migrate
1   ToTakers_3rd_Plr ride
1   ToTakers_3rd_Plr speak
1   ToTakers_3rd_Plr migrate
1   ToTakers_3rd_Sng rides
1   ToTakers_3rd_Sng speaks
1   ToTakers_3rd_Sng migrates

#Verbs that take with as a preposition
#To be takes with as well, but that is handled seperatly since its so irregular.
1   WithTakers_inf_Transitive         ride
1   Withtakers_inf_Intransitive       speak
1   WithTakers_inf_Transitive         drink
1   WithTakers_3rd_Plr_Transitive     ride
1   WithTakers_3rd_Plr_Intransitive   speak
1   WithTakers_3rd_Plr_Transitive     drink
1   WithTakers_3rd_Sng_Transitive     rides
1   WithTakers_3rd_Sng_Intransitive   speaks
1   WithTakers_3rd_Sng_Transitive     drinks
1   WithTakersPP_Transitive           ridden
1   WithTakersPP_Intransitive         spoken
1   WithTakersPP_Transitive           drunk
1   WithTakersContinuous_Transitive   riding
1   WithTakersContinuous_Intransitive speaking
1   WithTakersContinuous_Transitive   drinking

#All withtakers and totakers act regular so we can use this template trick
{
	<person _1st _2nd _3rd>
	<plurality _Sng _Plr>
	<transitivity _Transitive _Intransitive>
	|IGNORE person:_3rd|
	1   ToTakers{person}{plurality} ToTakers_3rd_Plr
	1   WithTakers{person}{plurality}{transitivity} WithTakers_3rd_Plr{transitivity}
}

#Prepositions
1   PrepOfLocation at
1   PrepOfLocation by
1   PrepOfLocation near
1   PrepOfLocation with
1   PrepOfLocation above

#Verbs in past using participles
{
	<person _1st _2nd _3rd>
	<plurality _Sng _Plr>
	<transitivity _Transitive _Intransitive>
	|IGNORE person:_3rd plurality:_Sng|
	#Don't template the 3rd Sng because that requires has instead of have

	1   VerbPP{person}{plurality}{transitivity}                 wrap_have PastParticiple{transitivity}
	1   VerbPP_3rd_Sng{transitivity}                            wrap_has  PastParticiple{transitivity}
	1   WithTakersPP{person}{plurality}{transitivity}           wrap_have WithTakersPP{transitivity}
	1   WithTakersPP_3rd_Sng{transitivity}                      wrap_has  WithTakersPP{transitivity}
	1   VerbPP{person}{plurality}                               VerbPP{person}{plurality}{transitivity}
    1   VerbPP_3rd_Sng                                          VerbPP_3rd_Sng{transitivity}
}
#Verbs that can take the subjunctive
{
	<person _1st _2nd _3rd>
	<plurality _Sng _Plr>
	|IGNORE person:_3rd plurality:_Sng|

	1   wrap_suggested                        suggested
	1   Subjunctive{person}{plurality}        suggest
	1   Subjunctive_3rd_Sng                   suggests
	1   PPSubjunctive{person}{plurality}      wrap_have wrap_suggested
	1   PPSubjunctive_3rd_Sng                 wrap_has wrap_suggested
	1   PresentParticipleSubjunctive          suggesting
}